var sys = require("sys"),
<<<<<<< HEAD
    Db = require('mongodb/db').Db,
    Server = require('mongodb/connection').Server,
    log4js = require('log4js'),
    connect = require('connect'),
	  express = require('express'),
    auth = require('connect-auth'),
    OAuth = require('oauth').OAuth,
    config = require('config-dev').config;
=======
  Db = require('mongodb/db').Db,
  Server = require('mongodb/connection').Server,
  log4js = require('log4js'),
  connect = require('connect'),
  express = require('express'),
  auth = require('connect-auth'),
  OAuth = require('oauth').OAuth,
  config = require('config-dev').config;
>>>>>>> 4650e5676ce208b367dc6ff2efee0ce11232967b

log4js.configure("./config/log4js-config.js");
var logger = log4js.getLogger("AUTH-MONGO");

config.twitter = config.twitter || { };

function logout(request) {
  delete request.session.signin;
  request.session.auth.user = undefined;
}

function getCurrentCredentials(req, callback) {
  callback(null, req.session.signin);
}

function setCurrentCredentials(req, creds) {
  req.session.signin = creds;
}

function setupRoutes(app) {
  app.get('/auth/twitter', function(req, res, params) {
    req.authenticate(['twitter'], function(error, authenticated) {
      if (authenticated) {
        var oa = new OAuth(config.twitter.requestUrl,
          config.twitter.responseUrl,
          config.twitter.key,
          config.twitter.secret,
          "1.0",
          null,
          "HMAC-SHA1");

        var user = {
          service : "twitter",
          userId : req.session.auth.user.user_id,
          name : req.session.auth.user.username,
          oauth : {
            token : req.session.auth.twitter_oauth_token,
            secret : req.session.auth.twitter_oauth_token_secret
          }
        };

        setCurrentCredentials(req, user);
        res.redirect('home');
      }
      else {
        res.redirect('/auth/error?s=tw');
      }
    });
  });
}

var auths = auth([
  auth.Twitter({consumerKey: config.twitter.key, consumerSecret: config.twitter.secret})
]);

var AuthProvider = {
  "auths" : auths,
  "addRoutes" : setupRoutes,
  "logout" : logout,
  "getCurrentCredentials" : getCurrentCredentials
};

exports.AuthProvider = AuthProvider;